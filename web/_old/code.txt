
Editing Features
  - walls can be moved around (without breaking contact with other wall joints)
  - walls endpoints can be extended and shortend (without breaking contact with other wall joints)
  - new walls can added (independently or by "extruding" an orthognal existing wall from some point)
  - wall width can be changed (individual per wall)
  - doors can be placed/moved/removed on the walls

------------

https://dribbble.com/shots/21965459-Interface-Design-Tools-with-AI
https://dribbble.com/shots/21957339-Dynamic-Data-Flow

--------------------

// Create a new user
// router.add(
//   {
//     path: "/",
//     method: "POST",
//     summary: "Create a new user",
//     desc: "Creates a new user with provided details.",
//     schema: {
//       body: Joi.object({
//         email: Joi.string().email().required(),
//         passwordHash: Joi.string().required(),
//         fullName: Joi.string().required(),
//         role: Joi.string().valid("admin", "user").required(),
//         isActive: Joi.boolean(),
//         isVerified: Joi.boolean(),
//         bio: Joi.string().optional(),
//         gender: Joi.string().valid("male", "female").optional(),
//         dateOfBirth: Joi.date().optional(),
//         phoneCountryCode: Joi.string().optional(),
//         phoneNumber: Joi.string().optional(),
//         addressCountry: Joi.string().optional(),
//         addressCity: Joi.string().optional(),
//         addressArea: Joi.string().optional(),
//         addressZip: Joi.string().optional(),
//       }),
//     },
//   },
//   async (req, res) => {
//     const user = new User(req.body);
//     await user.save();
//     return reply(res, user);
//   }
// );


// mapRectColor: "#ffd5ef"
// iconColor: "#a808c5",
// iconColor: "#cbae2f",
// mapRectColor: "#f2e3b9"
export const appNodeStyle: Record<string, NodeStyle> = {
  living: {
    Icon: Tv,
    iconColor: "#ed6f4f",
    mapRectColor: "#ffc5b4"
  },
  bedroom: {
    Icon: BedDouble,
    iconColor: "#358aa7",
    mapRectColor: "#d3e7f0"
  },
  kitchen: {
    Icon: Grape,
    iconColor: "#76bf43",
    mapRectColor: "#caf2aa"
  },
  bathroom: {
    Icon: Droplet,
    iconColor: "#67d8e0",
    mapRectColor: "#caf2aa"
  },
  balcony: {
    Icon: Eclipse,
    iconColor: "#0400fc",
    mapRectColor: "#ffe192"
  },
  fdoor: {
    Icon: LogIn,
    iconColor: "#000000",
    mapRectColor: ""
  }
} satisfies Record<NodeTypeId, NodeStyle>;

--------------------



Outer walls thicker than inner walls
doors need to know what walls they are part of to inherit thickness
doors need to know their orientation to
  orient cool curves
  orient wall measurements

Plan Renderings

Colors

https://au.pinterest.com/pin/742390319799553556/
https://au.pinterest.com/pin/modern-house-plan-3-bedroom-apartment-with-contemporary-architecture--340584790583169184/
https://www.roomsketcher.com/content/uploads/2021/12/RoomSketcher-2D-Floor-Plans-Online-Print.jpg

Wireframe

https://au.pinterest.com/pin/135178426310351891/
https://au.pinterest.com/pin/616922848991831077/

-----


// const color = "#d3e7f0";
// const color = "#f2e3b9";
// const color = "#caf2aa";
// const color = "#ffd5ef";
// const color = "#ffe192";
// const color = "#fec0ce";




/* import { Canvas } from "@react-three/fiber";
import { OrbitControls, Bounds, Stage } from "@react-three/drei";
import * as THREE from "three";

function MeshViewer({ meshGeometry }: { meshGeometry?: THREE.BufferGeometry }) {
  const defaultGeometry = new THREE.BoxGeometry(1, 1, 1);
  const geometry = meshGeometry || defaultGeometry;

  return (
    <Canvas camera={{ position: [3, 3, 3], near: 0.1, far: 100 }}>
      <color attach='background' args={["#202020"]} />

      <ambientLight intensity={0.5} />
      <directionalLight position={[5, 5, 5]} intensity={1.5} castShadow />
      <directionalLight position={[-5, -5, -5]} intensity={0.8} />

      <OrbitControls enableDamping={true} />
      <Bounds fit clip observe margin={2}>
        <mesh geometry={geometry}>
          <meshPhongMaterial color='lightblue' shininess={100} />
        </mesh>

        <lineSegments>
          <edgesGeometry attach='geometry' args={[geometry]} />
          <lineBasicMaterial attach='material' color='black' linewidth={1} />
        </lineSegments>
      </Bounds>
    </Canvas>
  );
}

export function Scratch() {
  return <MeshViewer />;
}
 */

===========================================+

import * as THREE from "three";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Environment, Bounds } from "@react-three/drei";
import polygonClipping from "polygon-clipping";
import * as BufferGeometryUtils from "three/addons/utils/BufferGeometryUtils.js";
import { getInitialPlan } from "@/lib/demo/initialPlan";

/* =============================================== */

// Constants
const CELL_SIZE = 5;
const WALL_HEIGHT = 50;
const CANVAS_SIZE = 1024; // for the dotted line texture


// Helper to create a dotted door texture
function createDottedDoorTexture(globalMinX, globalMinY, globalMaxX, globalMaxY, doors) {
  const canvas = document.createElement("canvas");
  canvas.width = CANVAS_SIZE;
  canvas.height = CANVAS_SIZE;
  const ctx = canvas.getContext("2d");
  if (!ctx) return null;

  // Clear canvas (transparent)
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Set style for dotted lines
  // ctx.strokeStyle = "rgba(0, 0, 0, 0.5)"; // subtle dark line
  ctx.strokeStyle = "rgba(0, 255, 0, 0.5)"; // subtle dark line
  ctx.lineWidth = 2;
  ctx.setLineDash([4, 4]); // 4px dash, 4px gap

  // Compute scaling factors from world units (floor bounding box) to canvas pixels.
  const worldWidth = globalMaxX - globalMinX;
  const worldHeight = globalMaxY - globalMinY;
  const scaleX = canvas.width / worldWidth;
  const scaleY = canvas.height / worldHeight;

  // For each door, compute its world position and size, then map to canvas coordinates.
  doors.forEach(door => {
    // door: { id, row, col, length, direction }
    // Compute door start in world coordinates:
    const doorX = door.col * CELL_SIZE;
    const doorY = door.row * CELL_SIZE;
    const doorLength = door.length * CELL_SIZE;

    // Map to canvas:
    const canvasX = (doorX - globalMinX) * scaleX;
    const canvasY = (doorY - globalMinY) * scaleY;
    const canvasDoorLengthX = door.direction === "h" ? doorLength * scaleX : CELL_SIZE * scaleX;
    const canvasDoorLengthY = door.direction === "v" ? doorLength * scaleY : CELL_SIZE * scaleY;

    ctx.beginPath();
    if (door.direction === "h") {
      // Draw horizontal dotted line along the center of the door's footprint.
      // For horizontal door, we'll assume the line is drawn along the bottom edge of the door opening.
      ctx.moveTo(canvasX, canvasY);
      ctx.lineTo(canvasX + canvasDoorLengthX, canvasY);
    } else {
      // For vertical door, draw vertical dotted line.
      ctx.moveTo(canvasX, canvasY);
      ctx.lineTo(canvasX, canvasY + canvasDoorLengthY);
    }
    ctx.stroke();
  });

  // Create a Three.js texture from the canvas.
  const texture = new THREE.CanvasTexture(canvas);
  texture.wrapS = THREE.ClampToEdgeWrapping;
  texture.wrapT = THREE.ClampToEdgeWrapping;
  texture.needsUpdate = true;
  (window as any).texture=texture;
  return texture;
}

// Helper: Build a wall geometry with door openings by splitting it into segments.
function buildWallGeometry(wall, allDoors) {
  const { row, col, length, direction, width } = wall;
  const T = width * CELL_SIZE; // wall thickness
  let segments = [];

  // Filter doors for this wall.
  let wallDoors;
  if (direction === "h") {
    wallDoors = allDoors.filter((door) =>
      door.direction === "h" && door.row === row && door.col >= col && door.col < col + length
    );
  } else {
    wallDoors = allDoors.filter((door) =>
      door.direction === "v" && door.col === col && door.row >= row && door.row < row + length
    );
  }

  // For each wall, we create segments along its length that are not occupied by a door.
  // We'll work in local coordinates along the wallâ€™s main axis.
  const totalLength = length * CELL_SIZE; // total wall length in pixels
  let doorIntervals = [];
  if (direction === "h") {
    // For horizontal walls, local X coordinate.
    doorIntervals = wallDoors.map((door) => {
      const dStart = (door.col - col) * CELL_SIZE;
      const dEnd = dStart + door.length * CELL_SIZE;
      return [dStart, dEnd];
    });
  } else {
    // For vertical walls, local Z coordinate.
    doorIntervals = wallDoors.map((door) => {
      const dStart = (door.row - row) * CELL_SIZE;
      const dEnd = dStart + door.length * CELL_SIZE;
      return [dStart, dEnd];
    });
  }
  // Sort door intervals by starting coordinate.
  doorIntervals.sort((a, b) => a[0] - b[0]);

  let currentStart = 0;
  doorIntervals.forEach(([dStart, dEnd]) => {
    if (dStart > currentStart) {
      segments.push([currentStart, dStart]);
    }
    currentStart = Math.max(currentStart, dEnd);
  });
  if (currentStart < totalLength) {
    segments.push([currentStart, totalLength]);
  }

  // For each segment, create a box geometry.
  let segmentGeometries = [];
  if (direction === "h") {
    // Horizontal wall: extends along X.
    segments.forEach(([s, e]) => {
      const segLength = e - s;
      if (segLength <= 0) return;
      // Create a box with dimensions: (segLength, WALL_HEIGHT, T)
      const geom = new THREE.BoxGeometry(segLength, WALL_HEIGHT, T);
      // Translate the geometry so its center is at:
      // x: (s + segLength/2), y: WALL_HEIGHT/2, z: T/2.
      geom.translate(s + segLength / 2, WALL_HEIGHT / 2, T / 2);
      segmentGeometries.push(geom);
    });
  } else {
    // Vertical wall: extends along Z.
    segments.forEach(([s, e]) => {
      const segLength = e - s;
      if (segLength <= 0) return;
      // Create a box with dimensions: (T, WALL_HEIGHT, segLength)
      const geom = new THREE.BoxGeometry(T, WALL_HEIGHT, segLength);
      // Translate so its center is at: x: T/2, y: WALL_HEIGHT/2, z: (s + segLength/2)
      geom.translate(T / 2, WALL_HEIGHT / 2, s + segLength / 2);
      segmentGeometries.push(geom);
    });
  }

  // Merge all segments into one geometry.
  return BufferGeometryUtils.mergeGeometries(segmentGeometries, true);
}

function build3DModel(plan) {
  // STEP 1: Build the floor mesh (using previous approach).
  const roomPolygons = [];
  plan.rooms.forEach((room) => {
    room.rects.forEach(([row, col, width, height]) => {
      const x = col * CELL_SIZE;
      const y = row * CELL_SIZE;
      const w = width * CELL_SIZE;
      const h = height * CELL_SIZE;
      roomPolygons.push([[x, y], [x + w, y], [x + w, y + h], [x, y + h]]);
    });
  });
  const unioned = polygonClipping.union(...roomPolygons.map((poly) => [poly]));
  let globalMinX = Infinity, globalMinY = Infinity, globalMaxX = -Infinity, globalMaxY = -Infinity;
  const floorShapes = [];
  if (unioned && unioned.length > 0) {
    unioned.forEach((polygon) => {
      polygon.forEach((ring) => {
        ring.forEach(([x, y]) => {
          globalMinX = Math.min(globalMinX, x);
          globalMinY = Math.min(globalMinY, y);
          globalMaxX = Math.max(globalMaxX, x);
          globalMaxY = Math.max(globalMaxY, y);
        });
      });
      const shape = new THREE.Shape();
      const outerRing = polygon[0];
      outerRing.forEach(([x, y], idx) => {
        if (idx === 0) shape.moveTo(x, y);
        else shape.lineTo(x, y);
      });
      shape.lineTo(outerRing[0][0], outerRing[0][1]);
      if (polygon.length > 1) {
        for (let i = 1; i < polygon.length; i++) {
          const holePath = new THREE.Path();
          polygon[i].forEach(([x, y], idx) => {
            if (idx === 0) holePath.moveTo(x, y);
            else holePath.lineTo(x, y);
          });
          holePath.lineTo(polygon[i][0][0], polygon[i][0][1]);
          shape.holes.push(holePath);
        }
      }
      floorShapes.push(shape);
    });
  }
  const floorGeometries = floorShapes.map((shape) => new THREE.ShapeGeometry(shape));
  let floorGeometry;
  if (floorGeometries.length === 1) {
    floorGeometry = floorGeometries[0];
  } else if (floorGeometries.length > 1) {
    floorGeometry = BufferGeometryUtils.mergeGeometries(floorGeometries);
  } else {
    floorGeometry = new THREE.PlaneGeometry(1, 1);
  }
  const floorMaterial = new THREE.MeshStandardMaterial({ color: 0x808080, side: THREE.DoubleSide });
  const floorMesh = new THREE.Mesh(floorGeometry, floorMaterial);
  // Rotate floor: use -Math.PI/2 to have it lie on the XZ plane.
  floorMesh.rotation.x = +Math.PI / 2;
  // Slightly lower the floor.
  floorMesh.position.y = -0.1;

  // STEP 1.5: Create a dotted-line overlay texture for door positions.
  // We'll use the door data from plan.doors.
  const doorTexture = createDottedDoorTexture(globalMinX, globalMinY, globalMaxX, globalMaxY, plan.doors);
  // Create a material for the overlay.
  const overlayMaterial = new THREE.MeshBasicMaterial({
    map: doorTexture,
    transparent: true,
    depthTest: false,
  });
  // Create an overlay mesh using the same geometry as the floor.
  const overlayMesh = new THREE.Mesh(floorGeometry, overlayMaterial);
  // Align the overlay with the floor; position it slightly above the floor.
  overlayMesh.rotation.x = +Math.PI / 2;
  overlayMesh.position.y = 5;

  // STEP 2: Build wall meshes using our segmentation method.
  const wallMeshes = plan.walls.map((wall) => {
    let geometry;
    if (wall.direction === "h") {
      geometry = buildWallGeometry(wall, plan.doors);
    } else {
      geometry = buildWallGeometry(wall, plan.doors);
    }
    const wallMaterial = new THREE.MeshStandardMaterial({ color: 0xa0522d });
    const mesh = new THREE.Mesh(geometry, wallMaterial);
    // For both wall types, the plan's (col, row) maps to (x, z).
    const posX = wall.col * CELL_SIZE;
    const posZ = wall.row * CELL_SIZE;
    mesh.position.set(posX, 0, posZ);
    return mesh;
  });

  // STEP 3: Center the entire model based on the floor bounding box.
  const centerX = (globalMinX + globalMaxX) / 2;
  const centerY = (globalMinY + globalMaxY) / 2;
  const group = new THREE.Group();
  group.add(floorMesh);
  group.add(overlayMesh);
  wallMeshes.forEach((mesh) => group.add(mesh));
  group.position.set(-centerX, 0, -centerY);
  return group;
}

/* =============================================== */

const model = build3DModel(getInitialPlan());

export function Scratch() {
  // Memoize the model so it only rebuilds when the plan changes.

  return (
    <Canvas camera={{ position: [-10, 40, 5], near: 0.1, far: 100 }}>
      <color attach='background' args={["#202020"]} />

      <ambientLight intensity={0.5} />
      {/* <directionalLight position={[5, 5, 5]} intensity={1.5} castShadow /> */}
      {/* <directionalLight position={[-5, -5, -5]} intensity={0.8} /> */}
      <directionalLight position={[100, 150, 100]} intensity={0.8} />
      <directionalLight position={[100, -150, 100]} intensity={0.8} />

      <OrbitControls target={[0, 0, 0]} enableDamping={true} />
      <Bounds fit clip observe margin={1.2}>
        <primitive object={model} />
      </Bounds>
    </Canvas>
  );
}


// This is sample data.
const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "/avatars/shadcn.jpg"
  },
  teams: [
    {
      name: "Acme Inc",
      logo: GalleryVerticalEnd,
      plan: "Enterprise"
    },
    {
      name: "Acme Corp.",
      logo: AudioWaveform,
      plan: "Startup"
    },
    {
      name: "Evil Corp.",
      logo: Command,
      plan: "Free"
    }
  ],
  navMain: [
    {
      title: "Playground",
      url: "#",
      icon: SquareTerminal,
      isActive: true,
      items: [
        {
          title: "History",
          url: "#"
        },
        {
          title: "Starred",
          url: "#"
        },
        {
          title: "Settings",
          url: "#"
        }
      ]
    },
    {
      title: "Models",
      url: "#",
      icon: Bot,
      items: [
        {
          title: "Genesis",
          url: "#"
        },
        {
          title: "Explorer",
          url: "#"
        },
        {
          title: "Quantum",
          url: "#"
        }
      ]
    },
    {
      title: "Documentation",
      url: "#",
      icon: BookOpen,
      items: [
        {
          title: "Introduction",
          url: "#"
        },
        {
          title: "Get Started",
          url: "#"
        },
        {
          title: "Tutorials",
          url: "#"
        },
        {
          title: "Changelog",
          url: "#"
        }
      ]
    },
    {
      title: "Settings",
      url: "#",
      icon: Settings2,
      items: [
        {
          title: "General",
          url: "#"
        },
        {
          title: "Team",
          url: "#"
        },
        {
          title: "Billing",
          url: "#"
        },
        {
          title: "Limits",
          url: "#"
        }
      ]
    }
  ],
  projects: [
    {
      name: "Design Engineering",
      url: "#",
      icon: Frame
    },
    {
      name: "Sales & Marketing",
      url: "#",
      icon: PieChart
    },
    {
      name: "Travel",
      url: "#",
      icon: Map
    }
  ]
};



/* import { Button } from "@/components/ui/button";
import { useClearAuthState } from "@/stores/auth-store";

export function CoreApp() {
  const clearAuthState = useClearAuthState();
  return (
    <div className='p-8'>
      <p className='text-xl font-bold'>CoreApp</p>

      <div className='mt-4'>
        <Button
          onClick={() => {
            clearAuthState();
          }}
          variant='destructive'
        >
          Logout
        </Button>
      </div>
    </div>
  );
}
 */


function ProfileBg({ defaultImage }: { defaultImage?: string }) {
  const [hideDefault, setHideDefault] = useState(false);
  const {
    previewUrl,
    fileInputRef,
    handleThumbnailClick,
    handleFileChange,
    handleRemove
  } = useImageUpload();

  const currentImage = previewUrl || (!hideDefault ? defaultImage : null);

  const handleImageRemove = () => {
    handleRemove();
    setHideDefault(true);
  };

  return (
    <div className='h-32'>
      <div className='relative flex h-full w-full items-center justify-center overflow-hidden bg-muted'>
        {currentImage && (
          <img
            className='h-full w-full object-cover'
            src={currentImage}
            alt={
              previewUrl
                ? "Preview of uploaded image"
                : "Default profile background"
            }
            width={512}
            height={96}
          />
        )}
        <div className='absolute inset-0 flex items-center justify-center gap-2'>
          <button
            type='button'
            className='z-50 flex size-10 cursor-pointer items-center justify-center rounded-full bg-black/60 text-white transition-[color,box-shadow] outline-none hover:bg-black/80 focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50'
            onClick={handleThumbnailClick}
            aria-label={currentImage ? "Change image" : "Upload image"}
          >
            <ImagePlusIcon size={16} aria-hidden='true' />
          </button>
          {currentImage && (
            <button
              type='button'
              className='z-50 flex size-10 cursor-pointer items-center justify-center rounded-full bg-black/60 text-white transition-[color,box-shadow] outline-none hover:bg-black/80 focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50'
              onClick={handleImageRemove}
              aria-label='Remove image'
            >
              <XIcon size={16} aria-hidden='true' />
            </button>
          )}
        </div>
      </div>
      <input
        type='file'
        ref={fileInputRef}
        onChange={handleFileChange}
        className='hidden'
        accept='image/*'
        aria-label='Upload image file'
      />
    </div>
  );
}

function Avatar({ defaultImage }: { defaultImage?: string }) {
  const { previewUrl, fileInputRef, handleThumbnailClick, handleFileChange } =
    useImageUpload();

  const currentImage = previewUrl || defaultImage;

  return (
    <div className='-mt-10 px-6'>
      <div className='relative flex size-20 items-center justify-center overflow-hidden rounded-full border-4 border-background bg-muted shadow-xs shadow-black/10'>
        {currentImage && (
          <img
            src={currentImage}
            className='h-full w-full object-cover'
            width={80}
            height={80}
            alt='Profile image'
          />
        )}
        <button
          type='button'
          className='absolute flex size-8 cursor-pointer items-center justify-center rounded-full bg-black/60 text-white transition-[color,box-shadow] outline-none hover:bg-black/80 focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50'
          onClick={handleThumbnailClick}
          aria-label='Change profile picture'
        >
          <ImagePlusIcon size={16} aria-hidden='true' />
        </button>
        <input
          type='file'
          ref={fileInputRef}
          onChange={handleFileChange}
          className='hidden'
          accept='image/*'
          aria-label='Upload profile picture'
        />
      </div>
    </div>
  );
}

-------------------------------

<form onSubmit={handleSubmit(onSubmit)} className='space-y-4'>
  {/* Full Name */}
  <div>
    <label>Full Name</label>
    <Input {...register("fullName")} icon={<UserIcon />} />
    {errors.fullName && (
      <p className='text-red-500'>{errors.fullName.message}</p>
    )}
  </div>

  {/* Email */}
  <div>
    <label>Email</label>
    <Input {...register("email")} icon={<MailIcon />} />
    {errors.email && (
      <p className='text-red-500'>{errors.email.message}</p>
    )}
  </div>

  {/* Role */}
  <div>
    <Label>Role</Label>
    <Select {...register("role")}>
      <SelectTrigger>
        <SelectValue placeholder='Role' />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value='user'>User</SelectItem>
        <SelectItem value='admin'>Admin</SelectItem>
      </SelectContent>
    </Select>
  </div>

  {/* Gender */}
  <div>
    <Label>Gender</Label>
    <Select {...register("gender")}>
      <SelectTrigger>
        <SelectValue placeholder='Gender' />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value='male'>Male</SelectItem>
        <SelectItem value='female'>Female</SelectItem>
      </SelectContent>
    </Select>
  </div>

  {/* Date of Birth */}
  {/*  <div>
    <label>Date of Birth</label>
    <DatePicker
      selected={
        watch("dateOfBirth")
          ? new Date(watch("dateOfBirth") as string)
          : undefined
      }
      onChange={date => setValue("dateOfBirth", date?.toISOString())}
      icon={<CalendarIcon />}
    />
  </div> */}

  {/* Phone */}
  <div className='flex space-x-2'>
    <Input
      {...register("phoneCountryCode")}
      placeholder='+1'
      className='w-1/4'
    />
    <Input
      {...register("phoneNumber")}
      icon={<PhoneIcon />}
      className='w-3/4'
    />
  </div>

  {/* Address */}
  <div>
    <label>Address</label>
    <Input
      {...register("addressCountry")}
      placeholder='Country'
      icon={<MapPinIcon />}
    />
    <Input {...register("addressCity")} placeholder='City' />
    <Input {...register("addressArea")} placeholder='Street/Area' />
    <Input {...register("addressZip")} placeholder='Zip Code' />
  </div>

  {/* Bio */}
  <div>
    <label>Bio</label>
    <textarea
      {...register("bio")}
      className='h-24 w-full rounded-md border p-2'
    />
  </div>

  {/* Status Toggles */}
  <div className='flex justify-between'>
    <label>Active</label>
    <Switch {...register("isActive")} />
  </div>
  <div className='flex justify-between'>
    <label>Verified</label>
    <Switch {...register("isVerified")} />
  </div>

  {/* Submit Button */}
  <Button type='submit' disabled={updateUserMutation.isPending}>
    {updateUserMutation.isPending ? "Saving..." : "Save Changes"}
  </Button>
</form>